<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctf小学生第二天</title>
      <link href="/2022/02/18/ctf-xiao-xue-sheng-di-er-tian/"/>
      <url>/2022/02/18/ctf-xiao-xue-sheng-di-er-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="ctf小学生第二天"><a href="#ctf小学生第二天" class="headerlink" title="ctf小学生第二天"></a>ctf小学生第二天</h1><p>​         RSA第二天，不多bb开始冲冲。<br>第七题：这次密钥没有给错啦</p><p>​         这道题也是和那道，“好像给错密钥了”题差不多，都是下载下来一个压缩包，里面有公钥和密文，我将其导入工具之后将n用yafu分解之后拿到了p和q，然后就是计算d然后计算m，之后m转字符拿到flag。</p><p><img src="/2022/02/18/ctf-xiao-xue-sheng-di-er-tian/blog内容\ctf小学生第二天\001.png"></p><p>第八题：中国剩余定理吧，e是多少呢？</p><pre class="language-none"><code class="language-none">import uuidimport libnumimport gmpy2import randomflag="flag{"+str(uuid.uuid4())+"}"print(flag)m = libnum.s2n(flag)p = libnum.generate_prime(1024)q = libnum.generate_prime(1024)n1=p*qp = libnum.generate_prime(1024)q = libnum.generate_prime(1024)n2=p*qp = libnum.generate_prime(1024)q = libnum.generate_prime(1024)n3=p*qwhile 1:    e=random.randint(10,20)    print(e)    if gmpy2.is_prime(e):        breakc1=pow(m,e,n1)c2=pow(m,e,n2)c3=pow(m,e,n3)print("n1=",n1)print("n2=",n2)print("n3=",n3)print("c1=",c1)print("c2=",c2)print("c3=",c3)n1= 17252219271006504217652265353315644822689102990264622695769709059400124061303815961435216889436124568403595230367283469177657079450282677401376417062215262907612929047987828085558578625928693928880671915353617997183001765819850856038580986341451354677532575518429983180603767256598249850685593173010163922025509601326326321500794396556036639237902931276631659616154399922016651201757258733618622358585354871247473186946333948694594826747068676868873107272038233419801485049530755094873655667843995961470816804517358517607436960955104105230718119794284575683888642896061373529872181319831826417002365270413786886230051n2= 19392925441119564341555603187441887561478389980762223332359001899590543508270070429654062355050348208292024600480329586395279855747079257790641213158649916066398059169788447789331043090129266878932663273082843414238406770932078873343241723699886063134727135260077063212826785200734480057973678585768855053011930755630200714822903690528979185570885528147643237687242400511057790185488304578078790856756920715781906997572283811891912799721107417543601482580382717235530747319855573633433655463698238396450160804967421072666570521835633096983265294367798652838134815267442249458052921576108382421808074197496756326651569n3= 16308931821160738277381987335188301508935609331979902438602520050075201076202607797174570476508752749939535558232194093916143544677788076366822749055817956020216396168552177076772752147703927950913692270761747051591209445357878745137592704614863982995068341117660355411746655172287336173901923306626058276062979558685583245075792769514424287449989413646849923270337368271506480123292135149298907255291763788483970298044852870009792041207447026753646424275224352404748955511851564024075916958820790827323891618229420999340841099848014212559544340277261118686124000247691040332469447586013408096906429110903073529177959c1= 9862674916042529918536092338186428078982165644848222161352523997087450888782685666699966847951244365280637841803438717743795168091292517068068919062777145241306310697080809891248377646719341230881649623908246452956514392532087121381507177426996878604461394499084196249530601094001617489710803912131948279913297986636209231828019500643894617602429551750854441781737312059554753531678468044053831648273296572848789992174657175515114338665837154883246900742720531354855559563140404249577415693939022593259289194459953438105757899587447271931995649255159342329359652305879885554769630544770966155000620489702683568172742c2= 11681944755560676324959185187799099414481370223339263320227032572815322776036541246094706574111230437855451279755698238561172128989213481236089341690470560136591884018327949217955636371986098667096134214617286477749483182783065573382874881799002834245675144902527287434610910847735302841154506319451669009489558469224087072461557995913424041810554224864384732427620959534242904535632660788940451410731486496846273769609538396613198060913461220093973836108967904185914468061114191996582010088055074020730119033560498292937987199687933047535216255557403558690069800171880133754299157682045716215838413976578382030795387c3= 12668278504770849369921196574913946259264733368388011806162184024969059726807829014394443240915036260802428499115569055027868892016678593665990881075365267878346964234838583098736850357277091593641798510490187797581111760056196425611939907216616878668062988351559417972184145303414105959155690055918434365061272003723017407148417783932381053632869804167234724945360916258465050598759067199479571813805864105608035898489711508922286844624373009203267737364854355266040795917980105237637939321394405488989345144898194063338461873834505409676538338655407786146050320466683048676780486336615260073541849747038981327813976</code></pre><p>​         题目已经说明是要用到孙子定理了，所以这是一种广播攻击，但是e没有给你，现在的问题是找到e，只是没办法直接找到e的准确的值只能找到e的一个范围大于10小于20且为素数，所以e取值11,13,17,19四个值中的一个，一个一个试试就行了。</p><pre class="language-none"><code class="language-none">import gmpy2import libnumfrom functools import reducen1= 17252219271006504217652265353315644822689102990264622695769709059400124061303815961435216889436124568403595230367283469177657079450282677401376417062215262907612929047987828085558578625928693928880671915353617997183001765819850856038580986341451354677532575518429983180603767256598249850685593173010163922025509601326326321500794396556036639237902931276631659616154399922016651201757258733618622358585354871247473186946333948694594826747068676868873107272038233419801485049530755094873655667843995961470816804517358517607436960955104105230718119794284575683888642896061373529872181319831826417002365270413786886230051n2= 19392925441119564341555603187441887561478389980762223332359001899590543508270070429654062355050348208292024600480329586395279855747079257790641213158649916066398059169788447789331043090129266878932663273082843414238406770932078873343241723699886063134727135260077063212826785200734480057973678585768855053011930755630200714822903690528979185570885528147643237687242400511057790185488304578078790856756920715781906997572283811891912799721107417543601482580382717235530747319855573633433655463698238396450160804967421072666570521835633096983265294367798652838134815267442249458052921576108382421808074197496756326651569n3= 16308931821160738277381987335188301508935609331979902438602520050075201076202607797174570476508752749939535558232194093916143544677788076366822749055817956020216396168552177076772752147703927950913692270761747051591209445357878745137592704614863982995068341117660355411746655172287336173901923306626058276062979558685583245075792769514424287449989413646849923270337368271506480123292135149298907255291763788483970298044852870009792041207447026753646424275224352404748955511851564024075916958820790827323891618229420999340841099848014212559544340277261118686124000247691040332469447586013408096906429110903073529177959c1= 9862674916042529918536092338186428078982165644848222161352523997087450888782685666699966847951244365280637841803438717743795168091292517068068919062777145241306310697080809891248377646719341230881649623908246452956514392532087121381507177426996878604461394499084196249530601094001617489710803912131948279913297986636209231828019500643894617602429551750854441781737312059554753531678468044053831648273296572848789992174657175515114338665837154883246900742720531354855559563140404249577415693939022593259289194459953438105757899587447271931995649255159342329359652305879885554769630544770966155000620489702683568172742c2= 11681944755560676324959185187799099414481370223339263320227032572815322776036541246094706574111230437855451279755698238561172128989213481236089341690470560136591884018327949217955636371986098667096134214617286477749483182783065573382874881799002834245675144902527287434610910847735302841154506319451669009489558469224087072461557995913424041810554224864384732427620959534242904535632660788940451410731486496846273769609538396613198060913461220093973836108967904185914468061114191996582010088055074020730119033560498292937987199687933047535216255557403558690069800171880133754299157682045716215838413976578382030795387c3= 12668278504770849369921196574913946259264733368388011806162184024969059726807829014394443240915036260802428499115569055027868892016678593665990881075365267878346964234838583098736850357277091593641798510490187797581111760056196425611939907216616878668062988351559417972184145303414105959155690055918434365061272003723017407148417783932381053632869804167234724945360916258465050598759067199479571813805864105608035898489711508922286844624373009203267737364854355266040795917980105237637939321394405488989345144898194063338461873834505409676538338655407786146050320466683048676780486336615260073541849747038981327813976def CRT(mi, ai):    assert (isinstance(mi, list) and isinstance(ai, list))    M = reduce(lambda x, y: x * y, mi)    ai_ti_Mi = [a * (M // m) * gmpy2.invert(M // m, m) for (m, a) in zip(mi, ai)]    return reduce(lambda x, y: x + y, ai_ti_Mi) % Mme = CRT([n1,n2,n3],[c1,c2,c3])print(me)for i in range(10,20):    m = gmpy2.iroot(me,i)    if m[1]:        e = i        print(m)        print(e)        print(libnum.n2s(int(m[0])))</code></pre><p>​         这里我只写代码了，这周末会将这些脚本涉及到的数学只是的详解写在另一篇blog上的。</p><p>第九题：不装了，摊牌了，都给你说啦。</p><pre class="language-none"><code class="language-none">import libnumimport gmpy2import uuidimport randomflag="flag{"+str(uuid.uuid4())+"}"print(flag)m=libnum.s2n(flag)import libnumimport gmpy2import uuidimport randomp=libnum.generate_prime(1024)q=libnum.generate_prime(1024)flag="flag{"+str(uuid.uuid4())+"}"n=p*qphi=(p-1)*(q-1)while True:    e=random.randint(10000,65537)    if gmpy2.gcd(e,phi)==1:        breakd=libnum.invmod(e,phi)c=libnum.s2n(flag)m=pow(c,d,n)print("p=",p)print("q=",q)print("m=",m)print("d=",d)print("n=",n)p= 97368485043593006405417010779079380120093793034626963175677083523770994936525207940968193918786949567460392401775664093619173263261961563254058029894381986376275758006361044924787173495349206752585567053148516364028668638365676608691913705470536048404291284013185217624584284180593606281872606674303227862923q= 174034507670751544663833619122758532253821916016434057019886746556436073565496931298817122456263338650062754783803599969233256462434713772953714031268092314238169815901012809393600325432808839406464715247202866205781781379919342815514475667193698142923567276511836660769097557234679842172400378371421781964289m= 10713159978080595248303368136468725248428004219265383017568301839870142446158283601395319409739267941310957665427316430008931224971372871063315206268306110608326979812846886034642104794304853873192876460915559231227506777599442060327993342928268503696889652417983518056546140617858431621418835939458147783959307745523951841137415442238550765735249662192808694822637569812286855868419594276671181075389377949452992838748913612817680444419095179848524538089268826799430007066454995062821698762487766844583651126504070187331835027249508337718321126942529727464313184539455069391263828081876598132257030625297646910710698d= 9390237469625625327767772772501860104758101441676147056413733378437848559772090449906444146313965320608216054116514082700525563243843771204901839503307479128967925438407562718344032952875123364816506810638856925864160725041981647121465162190807436028496569031178392890553177399355087553209625455734016456610191995005421761565733358070901800953003865665637614771105080265950575370421882124992956415586236776481116126106171771156040712750560153951276387711991194466653974368467861952058543035030816993478005980029315268610250448820942344432392048700822441849816775252185085593277697772013794833419946099360440772003135n= 16945476357208644122981981769374646293926105553473297697614690692652601713322227208661975312188938407555360864148584038092323753063552504666101719934810973632634565975015494529491878727459181230406832788393966249955724078848021959836773296479882218413561668025756126880165471682246491275523240659976474618187166357040262223313242756132850124163812125138317620789358310094970897417863278091383242119765582782451173174886739833284579593252969063972226490849473760753219069834155364181062555776029449332377688052659981492134779226642225005427449494407806051665362319573826702559006783213306262376903229146869818573156747</code></pre><p>​         这道题给了除了e以外的所有的值，再一看脚本内容这道题的关键就是求e，这个无非就是求d的逆元，invmod或invert函数都行。</p><pre class="language-none"><code class="language-none">import libnumimport gmpy2import uuidimport randomp= 97368485043593006405417010779079380120093793034626963175677083523770994936525207940968193918786949567460392401775664093619173263261961563254058029894381986376275758006361044924787173495349206752585567053148516364028668638365676608691913705470536048404291284013185217624584284180593606281872606674303227862923q= 174034507670751544663833619122758532253821916016434057019886746556436073565496931298817122456263338650062754783803599969233256462434713772953714031268092314238169815901012809393600325432808839406464715247202866205781781379919342815514475667193698142923567276511836660769097557234679842172400378371421781964289d= 9390237469625625327767772772501860104758101441676147056413733378437848559772090449906444146313965320608216054116514082700525563243843771204901839503307479128967925438407562718344032952875123364816506810638856925864160725041981647121465162190807436028496569031178392890553177399355087553209625455734016456610191995005421761565733358070901800953003865665637614771105080265950575370421882124992956415586236776481116126106171771156040712750560153951276387711991194466653974368467861952058543035030816993478005980029315268610250448820942344432392048700822441849816775252185085593277697772013794833419946099360440772003135phi = (q - 1)*(p - 1)m= 10713159978080595248303368136468725248428004219265383017568301839870142446158283601395319409739267941310957665427316430008931224971372871063315206268306110608326979812846886034642104794304853873192876460915559231227506777599442060327993342928268503696889652417983518056546140617858431621418835939458147783959307745523951841137415442238550765735249662192808694822637569812286855868419594276671181075389377949452992838748913612817680444419095179848524538089268826799430007066454995062821698762487766844583651126504070187331835027249508337718321126942529727464313184539455069391263828081876598132257030625297646910710698d= 9390237469625625327767772772501860104758101441676147056413733378437848559772090449906444146313965320608216054116514082700525563243843771204901839503307479128967925438407562718344032952875123364816506810638856925864160725041981647121465162190807436028496569031178392890553177399355087553209625455734016456610191995005421761565733358070901800953003865665637614771105080265950575370421882124992956415586236776481116126106171771156040712750560153951276387711991194466653974368467861952058543035030816993478005980029315268610250448820942344432392048700822441849816775252185085593277697772013794833419946099360440772003135n= 16945476357208644122981981769374646293926105553473297697614690692652601713322227208661975312188938407555360864148584038092323753063552504666101719934810973632634565975015494529491878727459181230406832788393966249955724078848021959836773296479882218413561668025756126880165471682246491275523240659976474618187166357040262223313242756132850124163812125138317620789358310094970897417863278091383242119765582782451173174886739833284579593252969063972226490849473760753219069834155364181062555776029449332377688052659981492134779226642225005427449494407806051665362319573826702559006783213306262376903229146869818573156747e=libnum.invmod(d,phi)print(e)c = pow(m,e,n)print(libnum.n2s(c))</code></pre><p>第十题：不装了，摊牌了，这次全部都参数都给你，包括e</p><pre class="language-none"><code class="language-none">import uuidimport libnumimport gmpy2flag="flag{"+str(uuid.uuid4())+"}"print(flag)e = 65537m = libnum.s2n(flag.encode())p1 = libnum.generate_prime(128)q1 = libnum.generate_prime(128)p2 = libnum.generate_prime(128)q2 = libnum.generate_prime(128)print("p1=",p1)print("q1=",q1)print("p2=",p2)print("q2=",q2)n1=p1*q1n2=p2*q2print("n1=",n1)print("n2=",n2)c1 = pow(m, e, n1)c2 = pow(m, e, n2)print("c1=",c1)print("c2=",c2)p1= 241529374856419543994843741620715478233q1= 329891612475502969315412700917758756573p2= 179415062328238613586720079938194290751q2= 281209161331996176661322999324485217597n1= 79678514931584446837886795964984740987618425126262080131520484181733127175509n2= 50453159207651801862952938090505477143503284591035016948403490994601319545347c1= 10906371165492800616190805676717306177005704888515733402096006986355132032250c2= 47055855052437161522184969745110429012879528443871661682592147046669796586664</code></pre><p>​         确实是能给的都给了，只是看你会不会用，我突然想明白了m^e和c是关于n同余的，所以很多时候，m^e和c之间是可以划等号(约等)的，所以中国剩余定理算出来的可以直接是c，所以这里可以直接得到n = n1*n2(之后解释)，由此拿到d在拿到明文m。</p><pre class="language-none"><code class="language-none">from functools import reduceimport libnumimport gmpy2p1= 241529374856419543994843741620715478233q1= 329891612475502969315412700917758756573p2= 179415062328238613586720079938194290751q2= 281209161331996176661322999324485217597n1= 79678514931584446837886795964984740987618425126262080131520484181733127175509n2= 50453159207651801862952938090505477143503284591035016948403490994601319545347c1= 10906371165492800616190805676717306177005704888515733402096006986355132032250c2= 47055855052437161522184969745110429012879528443871661682592147046669796586664e = 65537def CRT(mi, ai):    assert (isinstance(mi, list) and isinstance(ai, list   ))    M = reduce(lambda x, y: x * y, mi)    ai_ti_Mi = [a * (M // m) * gmpy2.invert(M // m, m) for (m, a) in zip(mi, ai)]    return reduce(lambda x, y: x + y, ai_ti_Mi) % Mc = CRT([n1,n2,],[c1,c2,])n = n1 * n2phi = (p1 - 1)*(p2 - 1)*(q1 - 1)*(q2 - 1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(m)print(libnum.n2s(int(m)))</code></pre><p>第十一题：奇怪的N</p><p>n= 161670795418661108941395547760068053355832555077779027853700140442876298077926786030806243269042521234383793929910836023913994987010924339006536693866763078849189869497871752489277315727669547511079303136326388638480680630822677173084810848784554433394382029956739707395702556105138001868786944077871569844771<br>c= 91652340468387584012845155237237896957786753396661434559421169499111938419733760364914054180181470453332534789456757372866493406817246725731113863637159054175158914882334950110118713886213759125279941357012004180349611604118066085014934218543579248275421019690815403585470855502464076600672369539603525850924<br>e= 65537</p><p>​         看不懂为啥N奇怪了，但是直接试着将N,f分解了试着算下d，结果分解出来一个试1一个还是原来的n，原来n是素数，这样的话n和欧拉函数φ(n)就1等于n - 1，这样有e的话还是可以直接将d求出来。</p><pre class="language-none"><code class="language-none">import libnumimport gmpy2import uuidimport randomphi = 161670795418661108941395547760068053355832555077779027853700140442876298077926786030806243269042521234383793929910836023913994987010924339006536693866763078849189869497871752489277315727669547511079303136326388638480680630822677173084810848784554433394382029956739707395702556105138001868786944077871569844770e= 65537d= gmpy2.invert(e,phi)n=161670795418661108941395547760068053355832555077779027853700140442876298077926786030806243269042521234383793929910836023913994987010924339006536693866763078849189869497871752489277315727669547511079303136326388638480680630822677173084810848784554433394382029956739707395702556105138001868786944077871569844771c= 91652340468387584012845155237237896957786753396661434559421169499111938419733760364914054180181470453332534789456757372866493406817246725731113863637159054175158914882334950110118713886213759125279941357012004180349611604118066085014934218543579248275421019690815403585470855502464076600672369539603525850924m= pow(c,d,n)print(libnum.n2s(int(m)))</code></pre><p>​       ok，到这里今天就结束了吧，明天再见。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ctf小学生第一天</title>
      <link href="/2022/01/24/ctf-xiao-xue-sheng-di-yi-tian/"/>
      <url>/2022/01/24/ctf-xiao-xue-sheng-di-yi-tian/</url>
      
        <content type="html"><![CDATA[<h1 id="ctf小学生第一天"><a href="#ctf小学生第一天" class="headerlink" title="ctf小学生第一天"></a>ctf小学生第一天</h1><p>​        今天开始刷题，要不然总感觉只在百度上看理论概念没意思，关键是感觉没用或只说不知道怎么用，所以还是从刷题开始，嗯，先从风二西的ctf小学生开始，RSA冲冲冲。</p><h2 id="第一题：e-1"><a href="#第一题：e-1" class="headerlink" title="第一题：e = 1"></a>第一题：e = 1</h2><pre class="language-none"><code class="language-none">import gmpy2import libnumimport uuidflag="flag{"+str(uuid.uuid4())+"}"print(flag)m=libnum.s2n(flag)p=libnum.generate_prime(512)q=libnum.generate_prime(512)n=p*qe=1c=pow(m,e,n)print("n=",n)print("c=",c)print("e=",e)n= 90981495617756764768563887456121485632852821294992273406540426689270512099459758619024797604428497371505761088482731691740604544236399875476209161759486542642982460755167111605224305056733441714037861907483938283623389941146434398522162360139652831844867722242479359748886192684447486989079947504196734648421c= 56006392793403067781861231386277942050474101531963376999457063633948500765747587998496106575433840765</code></pre><p>​       e=1,则根据加密公式m=pow(c,e,n),又因为m和c均小于n，所以此题中c = m，由此可以直接得到flag。</p><pre class="language-none"><code class="language-none">import gmpy2import libnumm = 56006392793403067781861231386277942050474101531963376999457063633948500765747587998496106575433840765flag = libnum.n2s(m)print(flag)</code></pre><h2 id="第二题：还是e-1"><a href="#第二题：还是e-1" class="headerlink" title="第二题：还是e=1"></a>第二题：还是e=1</h2><pre class="language-none"><code class="language-none">import gmpy2import libnumimport uuidflag="flag{"+str(uuid.uuid4())+"}"print(flag)m=libnum.s2n(flag)p1=libnum.generate_prime(64)q1=libnum.generate_prime(64)p2=libnum.generate_prime(64)q2=libnum.generate_prime(64)p3=libnum.generate_prime(64)q3=libnum.generate_prime(64)e=1c1=pow(m,e,p1*q1)c2=pow(m,e,p2*q2)c3=pow(m,e,p3*q3)print("n1=",p1*q1)print("c1=",c1)print("n2=",p2*q2)print("c2=",c2)print("n3=",p3*q3)print("c3=",c3)n1= 172774622114813683746188230007837413819c1= 170260248491697016437095929037490480036n2= 160333927436069409658483084503168246581c2= 45134242975344810542214361639231372051n3= 170109598387116572557100744899522621873c3= 47903985600747367026642413789127948969</code></pre><p>​          这道题乍一看好像很难，但带入加密公式结合e = 1就可以知道c1=m%n1，c2 = m%n2，c3 = m%n3，这应该是和中国剩余定理有关，所以解题脚本就可以这样写。</p><pre class="language-none"><code class="language-none">from functools import reduceimport libnumdef egcd(a, b):    """扩展欧几里得"""    if 0 == b:        return 1, 0, a    x , y, q =egcd(b, a % b)    x, y = y, (x - a // b * y)    return x, y, qdef chinese_remainder(pairs):    """中国剩余定理"""    mod_list, remainder_list = [p[0] for p in pairs], [p[1] for p in pairs]    mod_product = reduce(lambda x, y: x * y, mod_list)    mi_list = [mod_product//x for x in mod_list]    mi_inverse = [egcd(mi_list[i], mod_list[i])[0] for i in range(len(mi_list))]    x = 0    for i in range(len(remainder_list)):        x += mi_list[i] * mi_inverse[i] * remainder_list[i]    x %= mod_product    return xif __name__=='__main__':    n1 = 172774622114813683746188230007837413819    c1 = 170260248491697016437095929037490480036    n2 = 160333927436069409658483084503168246581    c2 = 45134242975344810542214361639231372051    n3 = 170109598387116572557100744899522621873    c3 = 47903985600747367026642413789127948969    m = chinese_remainder([(172774622114813683746188230007837413819, 170260248491697016437095929037490480036), (160333927436069409658483084503168246581, 45134242975344810542214361639231372051), (170109598387116572557100744899522621873, 47903985600747367026642413789127948969)])    print(libnum.n2s(m)）</code></pre><h2 id="第三题-：是同模？还是共模？"><a href="#第三题-：是同模？还是共模？" class="headerlink" title="第三题 ：是同模？还是共模？"></a>第三题 ：是同模？还是共模？</h2><pre class="language-none"><code class="language-none">import libnumimport gmpy2import uuidflag="flag{"+str(uuid.uuid4())+"}"print(flag)m=libnum.s2n(flag)p=libnum.generate_prime(1024)q=libnum.generate_prime(1024)n1=p*qn2=p*qe1=2333e2=23333m=libnum.s2n(flag)c1=pow(m,e1,n1)c2=pow(m,e2,n2)print("n1=",n1)print("n2=",n2)print("e1=",e1)print("e2=",e2)print("c1=",c1)print("c2=",c2)n1= 29143645421250041964610131519796316209374397204155469976436282970270223093227270116936148775043815634542786053957754648588547916685855943233747355087950255420084529208272959726798944771529812280211595246632324164318414568921620903228792312422949049251124675105357096001511900182384982136608469004475877350443767898973989583173128030434940886052792797816540787358610263798109517476404857884853737946851599020695228874374154464554424052641473818628619315542580958678324625251508687755281620720247997239232768548283841103391498016239630806481980671475372463330330690559668182431046684389707596830868072082755735808300723n2= 29143645421250041964610131519796316209374397204155469976436282970270223093227270116936148775043815634542786053957754648588547916685855943233747355087950255420084529208272959726798944771529812280211595246632324164318414568921620903228792312422949049251124675105357096001511900182384982136608469004475877350443767898973989583173128030434940886052792797816540787358610263798109517476404857884853737946851599020695228874374154464554424052641473818628619315542580958678324625251508687755281620720247997239232768548283841103391498016239630806481980671475372463330330690559668182431046684389707596830868072082755735808300723e1= 2333e2= 23333c1= 28464542187422191031850220803592681443982634383785165404787481127746742239081112082691277387380864221897493018787897237288845518265099977907474953791840485909853466983639444091059228300562651089136949321590723345012238904080799669440783536285513938852463305681933753888253442824802846555416205812335548719095747051066829873263830078172121545700751405449738971567108453397818830862826958070177783517124845910659072272862984614381062761492904361633028713990053614106081540076229259722671415935974092569803776537579754503894924503109547447412708945156397515728781495017776632238192662716448961774725838090086512922104959c2= 25460740614301054941307417174277347322525553796796196288752769907863955398765515335380778529183621484339197914989256662774198864351177654624197775903029703756861955442584045861986636864875901226135976736671991519278805887617112679731304236414795141091073965816301344099945916381853638867328898132344214266933361239131644854117821204868171505133539861191262265599453830009333580296852518159984059120727521818924305349230266951553997005351779068782851592785429670130975251007122036733544487495703754895368638401347707384114165405725474647288045480904543934563092673393523874294830739729422653819421294571780102207292072</code></pre><p>​       md，典型的共模题，你题目给我装什么？？[doge]共模的解法是要用到拓展欧几里得算法，直接出解题脚本就行了。</p><pre class="language-none"><code class="language-none">import gmpy2import libnumn= 25333966058003377512707481338795714713737652659944601834182685873529702913988641983855700459996104700470621411559153944988952210084014634675583566338568882440708528997808798650962116756969822211586531522430245040013570571043385238601846104615050089457836721437790715225367971106085839523500735480715155424498941150468093083816830215632716244390679417218873179734276657411907216486790815037105108306055794473002315541787461904728375164737225486501009857299717749346279371251245318729951905832578739696926931502225899707226264570557623527701806829827566904224572897378639191756878049342203546309520458672464170859577433e1= 14606334023791426c1= 11355981897781478907853356911752561659125575027336719997290835661089901154031171698660586203170528368228850895159361637188990782030255983633790580700032092629587631108597144196551438410868034739981960656110887650747325311613900008001234835897835613759692146419080113176963747835592656185435741504176116672174539018089139547795447109458469225330809064539216773123671814859510069089532677704482026169178543062578686794346026774853085101278125763460212801929360456888869350105294595904940799522522144740464043605342348269086324747729288399275079874271519208155039364092577755518532799345651172433227745483422620900776136e2= 13813369129257838c2= 1326499538902841116411674554069945581390130048432351353260154261863309471312810811160302458644816390944833633923435634961251092531893503039914793217247984595331920909367627316087404934402312358642315675486438968585084964845763881078835787872160374025547400141298650794551970291119975344578667689961134814676553190178139842507675899262024572370313939107080072875068218336255452161407859907308656094331557912187788276334833723893856310434523337557011032081467262457427167978528280339494077785813461280853735266463152709443731638714219391773144349752633555310299318290576258086971373777118482642702020599928071855133041def rsa_gong_N_def(e1,e2,c1,c2,n):    e1, e2, c1, c2, n=int(e1),int(e2),int(c1),int(c2),int(n)    s = gmpy2.gcdext(e1, e2)    s1 = s[1]    s2 = s[2]    if s1 &lt; 0:        s1 = - s1        c1 = gmpy2.invert(c1, n)    elif s2 &lt; 0:        s2 = - s2        c2 = gmpy2.invert(c2, n)    m = (pow(c1,s1,n) * pow(c2 ,s2 ,n)) % n    return int(m)m = rsa_gong_N_def(e1,e2,c1,c2,n)print(m)print(libnum.n2s(int(m)))</code></pre><h2 id="第四题：工具脚本一把梭吧"><a href="#第四题：工具脚本一把梭吧" class="headerlink" title="第四题：工具脚本一把梭吧"></a>第四题：工具脚本一把梭吧</h2><pre class="language-none"><code class="language-none">import libnumimport gmpy2import uuidimport randomflag="flag{"+str(uuid.uuid4())+"}"print(flag)m=libnum.s2n(flag)#生成随机素数p=libnum.generate_prime(512)q=libnum.generate_prime(512)#字符串转数字n=p*qphi_n=(p-1)*(q-1)#计算dwhile True:    nbits=1024    d = random.getrandbits(nbits // 4)    if (libnum.gcd(d, phi_n) == 1 and 36 * pow(d, 4) &lt; n):        break#计算ee = libnum.invmod(d,phi_n)c=pow(m,e,n)n= 76230002233243117494160925838103007078059987783012242668154928419914737829063294895922280964326704163760912076151634681903538211391318232043295054505369037037489356790665952040424073700340441976087746298068796807069622346676856605244662923296325332812844754859450419515772460413762564695491785275009170060931e= 19252067118061066631831653736874168743759225404757996498452383337816071866700225650384181012362739758314516273574942119597579042209488383895276825193118297972030907899188520426741919737573230050112614350868516818112742663713344658825493377512886311960823584992531185444207705213109184076273376878524090762327c= 51129364468759654610691969029018077135681286452403720342930701227318278867902499808039789577625318001225092301902887105131054762178225243088434961189430225241008880599986750881642671737591885881772112932433413661123951666955204365852817050308723133101090183352917490942744092495494108693783108146041173249096print ("n=",n)print ("e=",e)print ("c=",c)</code></pre><p>​         把题目一看就跟我说要工具，我没工具啊wtm0.0，看题吧，题里面给了个很大的e，我推测是维纳攻击，之前有专门了解过这个要用到连分数，我之前有写过相关的脚本，之后我带进去试了试没发现确实能出来，这题是维纳攻击没错了。</p><pre class="language-none"><code class="language-none">import gmpy2import libnumdef continuedFra(x, y):    """计算连分数    :param x: 分子    :param y: 分母    :return: 连分数列表    """    cf = []    while y:        cf.append(x // y)        x, y = y, x % y    return cfdef gradualFra(cf):    """计算传入列表最后的渐进分数    :param cf: 连分数列表    :return: 该列表最后的渐近分数    """    numerator = 0    denominator = 1    for x in cf[::-1]:        # 这里的渐进分数分子分母要分开        numerator, denominator = denominator, x * denominator + numerator    return numerator, denominatordef solve_pq(a, b, c):    """使用韦达定理解出pq，x^2−(p+q)∗x+pq=0    :param a:x^2的系数    :param b:x的系数    :param c:pq    :return:p，q    """    par = gmpy2.isqrt(b * b - 4 * a * c)           #isqrt:返回()内的整数平方根,25返回5。24返回4....    return (-b + par) // (2 * a), (-b - par) // (2 * a)def getGradualFra(cf):    """计算列表所有的渐近分数    :param cf: 连分数列表    :return: 该列表所有的渐近分数    """    gf = []    for i in range(1, len(cf) + 1):        gf.append(gradualFra(cf[:i]))         #gradualFra:计算传入列表最后的渐进分数    return gfdef wienerAttack(e, n):    """    :param e:    :param n:    :return: 私钥d    """    cf = continuedFra(e, n)    gf = getGradualFra(cf)    for d,k in gf:        if k == 0: continue        if (e * d - 1) % k != 0:            continue        phi = (e * d - 1) // k        p, q = solve_pq(1, n - phi + 1, n)        if p * q == n:            print(d)            return dn= 76230002233243117494160925838103007078059987783012242668154928419914737829063294895922280964326704163760912076151634681903538211391318232043295054505369037037489356790665952040424073700340441976087746298068796807069622346676856605244662923296325332812844754859450419515772460413762564695491785275009170060931e= 19252067118061066631831653736874168743759225404757996498452383337816071866700225650384181012362739758314516273574942119597579042209488383895276825193118297972030907899188520426741919737573230050112614350868516818112742663713344658825493377512886311960823584992531185444207705213109184076273376878524090762327c= 51129364468759654610691969029018077135681286452403720342930701227318278867902499808039789577625318001225092301902887105131054762178225243088434961189430225241008880599986750881642671737591885881772112932433413661123951666955204365852817050308723133101090183352917490942744092495494108693783108146041173249096d=wienerAttack(e, n)m=pow(c, d, n)print(libnum.n2s(m).decode())</code></pre><p>​        这篇博客只是刷题用的，维纳攻击之类的详解我可以在水一篇[doge].</p><h2 id="第五题：好像给错密钥了"><a href="#第五题：好像给错密钥了" class="headerlink" title="第五题：好像给错密钥了"></a>第五题：好像给错密钥了</h2><p>​         确实给错了，给了个压缩包，里面是flag和公钥，之前风二西在b站上发过类似的工具，这里可以直接导入文件进行解密，我导入之后给了n，e和c，现将n分解得到p和q之后计算d，之后可以直接拿到flag。</p><p><img src="/2022/01/24/ctf-xiao-xue-sheng-di-yi-tian/001.jpg"></p><p>​           flag{947ce8a3-40ee-46c0-a00e-0026e583f8da}。</p><h2 id="第六题：很简单的"><a href="#第六题：很简单的" class="headerlink" title="第六题：很简单的"></a>第六题：很简单的</h2><p>n= 2402438576165473029108412792590900622915797278696450348937297683358289425471810609861361183936792588570688309584438708660907863882101777257628990375920892592671725390629604688454167797154718295679433805383082825684737247057084904476690427408950519465993155695550296000374172597794486760547755879527113453<br>e= 3<br>c= 175676150266627654394509074891404164566854171033140030366264579869316998382531731238646439305983889007988827572538127555289345112927153391354273822296560289724299704969505044786520464609064991216105190142528210147105407231359976850587913961569714117627302606370251386092433653181453744354380262673514341</p><p>​         一开始我以为是和上一题一样，就想着分解n试试，结果不行，之后才仔细看题，我发现这次e很小，可能还是维纳攻击，带入脚本试试，结果不行，之后又想到了低指数加密攻击，带入脚本后发现可以。</p><pre class="language-none"><code class="language-none">import gmpy2import libnumdef de(c, e, n):    k = 0    while True:        mm = c + n*k        result, flag = gmpy2.iroot(mm, e)        if True == flag:            return result        k += 1n= 2402438576165473029108412792590900622915797278696450348937297683358289425471810609861361183936792588570688309584438708660907863882101777257628990375920892592671725390629604688454167797154718295679433805383082825684737247057084904476690427408950519465993155695550296000374172597794486760547755879527113453e= 3c= 175676150266627654394509074891404164566854171033140030366264579869316998382531731238646439305983889007988827572538127555289345112927153391354273822296560289724299704969505044786520464609064991216105190142528210147105407231359976850587913961569714117627302606370251386092433653181453744354380262673514341m=de(c,e,n)print(m)print(libnum.n2s(int(m)).decode())</code></pre><p>​       这种攻击是因为e太小了使得m的e次方不一定有n大或者只比n大一点(相对来说[doge])，可以得到c = m 的e次方或者c = m的e次方 - n 或者 c = m的e次方 - 2n，可以直接通过开方将m求出来。</p><p>​        OK，今天就到这里了，明天继续。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码入门大纲</title>
      <link href="/2022/01/20/mi-ma-ru-men-da-gang/"/>
      <url>/2022/01/20/mi-ma-ru-men-da-gang/</url>
      
        <content type="html"><![CDATA[<p>​             建筑生转到信安之后最难的地方就在于建筑是不学数学的，所以我现在真的就是零基础了o(╥﹏╥)o，不过既然已经转到信安了而且还喜欢密码，那就努力学好吧。密码要学的东西相比于其他的来说很多，所以知道要学什么才更重要，不管这是作出来的还是什么，但学东西有些条理性还是会让我很舒服。<br>​             之篇博客的内容基本会是照抄<strong>r3的skill tree</strong> ，这种东西其实可以不用做的，放在那里我去看就行了，只是毕竟放在我的blog里，我每天都能看到心里会有这回事，还是能带来一些紧迫感的。<br>​             CRYPTO要学的技能：<br>​                         一.数学基础<br>​                         二.密码理论<br>​                         三编码方式<br>​                         四.古典密码<br>​                         五.序列密码<br>​                         六.分组密码<br>​                         七.哈希函数<br>​                         八.认证与完整性<br>​                         九.公钥密码<br>​                         十.签名<br>​                         十一.其他相关算法<br>​                         十二.相关语言<br>​             要学大概就是这么些个东西，现在正值寒假，我还要去补习一些东西，时间比较紧，先挑一些简单的、理论性的东西吧，今天先给自己把目标定出来，以后每天打卡学习，2月18号寒假结束的时候，看看自己到底有几斤几两。<br>​             数学基础：<br>                                 1.《抽象代数引论》<br>​                                 2.初等数论<br>​                                 3.《同济大学大一数学第七版》<br>​             密码理论：（了解）<br>​                                 1.香农密码<br>​                                 2.随机预言模型（Random Oracle Model）<br>​                                 3.One Way Function<br>​                                 4.单向函数（<em>One</em>-<em>way</em> function）</p><p>​              编码方式:<br>​                                 1.base64/base32<br>​                                 2.hex<br>​                                 3.uuencode<br>​                                 4.urlencode<br>​                                 5.shellcode<br>​                                 6.Quoted-printable<br>​                                 7.Quoted-printable<br>​              古典密码：<br>​                                 r3上的全部<br>​               哈希函数：（学不精，了解）<br>​                                   1.MD5<br>​                                   2.SHA0/SHA1<br>​                                   3.SHA2（SHA224/256/384/512）<br>​                                   4.SHA3(Keccak)<br>​                                   5.BLAKE2/BLAKE3<br>​                                   6.彩虹表<br>​                                   7.生日攻击<br>​              公钥密码：<br>​                                RSA<br>​              行了，就这些吧，确实很多，慢慢学吧，多花点时间，其实我觉得上面的东西大部分我还是学不好，但早晚都要学，现在先进行一些了解也好，主要我估计是要去刷题的，先报平台吧<br>​             <a href="http://162.14.73.60:18000/login?next=/challenges?">CTF小学生</a><br>​              <a href="https://buuoj.cn/challenges">BUUCTF在线评测 (buuoj.cn)</a><br>​              <a href="https://cryptohack.org/">CryptoHack – 一个有趣，免费的学习密码学平台</a></p><p>​              好了，就这样吧，开始学习了。</p><p>date: 2022-01-20 13:50:14</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/19/hello-world/"/>
      <url>/2022/01/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="language-bash" data-language="bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
